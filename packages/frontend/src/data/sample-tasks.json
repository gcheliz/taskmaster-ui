{
  "taskmaster-ui-sample": {
    "tasks": [
      {
        "id": 1,
        "title": "Implement User Authentication",
        "description": "Create a secure user authentication system with JWT tokens and role-based access control.",
        "details": "This task involves setting up authentication middleware, creating login/logout endpoints, and implementing JWT token validation. The system should support different user roles (admin, developer, viewer) with appropriate permissions.",
        "testStrategy": "Unit tests for authentication functions, integration tests for login flow, and E2E tests for the complete authentication workflow.",
        "priority": "high",
        "dependencies": [],
        "status": "in-progress",
        "complexity": 8,
        "estimatedHours": 16,
        "assignedTo": "john.doe@example.com",
        "tags": ["auth", "security", "backend"],
        "createdAt": "2025-01-10T09:00:00.000Z",
        "updatedAt": "2025-01-12T14:30:00.000Z",
        "dueDate": "2025-01-20T17:00:00.000Z",
        "subtasks": [
          {
            "id": 1,
            "title": "Set up JWT middleware",
            "description": "Create middleware to validate JWT tokens on protected routes",
            "status": "done",
            "testStrategy": "Test with valid and invalid tokens"
          },
          {
            "id": 2,
            "title": "Implement login endpoint",
            "description": "Create POST /api/auth/login endpoint with proper validation",
            "status": "in-progress",
            "testStrategy": "Test with valid and invalid credentials"
          },
          {
            "id": 3,
            "title": "Add role-based access control",
            "description": "Implement middleware to check user roles and permissions",
            "status": "pending",
            "testStrategy": "Test access control for different user roles"
          }
        ]
      },
      {
        "id": 2,
        "title": "Design Database Schema",
        "description": "Create a comprehensive database schema for the task management system with proper relationships and constraints.",
        "details": "Design tables for users, projects, tasks, comments, and attachments. Include proper foreign key relationships, indexes for performance, and data validation constraints.",
        "testStrategy": "Create migration scripts and test data seeding. Verify all relationships work correctly.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "complexity": 6,
        "estimatedHours": 12,
        "assignedTo": "jane.smith@example.com",
        "tags": ["database", "schema", "backend"],
        "createdAt": "2025-01-08T10:00:00.000Z",
        "updatedAt": "2025-01-11T16:45:00.000Z",
        "dueDate": "2025-01-15T17:00:00.000Z"
      },
      {
        "id": 3,
        "title": "Create Task Board UI Component",
        "description": "Build a React component for the Kanban-style task board with drag-and-drop functionality.",
        "details": "Use React DnD library for drag-and-drop. Component should be responsive and work on mobile devices. Include animations for smooth transitions.",
        "testStrategy": "Component tests for rendering, drag-and-drop functionality tests, and responsive design tests.",
        "priority": "medium",
        "dependencies": [2],
        "status": "pending",
        "complexity": 7,
        "estimatedHours": 20,
        "assignedTo": "mike.johnson@example.com",
        "tags": ["frontend", "react", "ui"],
        "createdAt": "2025-01-09T11:00:00.000Z",
        "updatedAt": "2025-01-09T11:00:00.000Z",
        "dueDate": "2025-01-25T17:00:00.000Z"
      },
      {
        "id": 4,
        "title": "Implement Real-time Updates",
        "description": "Add WebSocket support for real-time task updates across all connected clients.",
        "details": "Set up Socket.IO server and client integration. Handle connection management, reconnection logic, and event broadcasting for task changes.",
        "testStrategy": "Test real-time synchronization with multiple clients, connection stability tests, and error handling tests.",
        "priority": "medium",
        "dependencies": [1, 3],
        "status": "pending",
        "complexity": 9,
        "estimatedHours": 24,
        "assignedTo": "sarah.wilson@example.com",
        "tags": ["websocket", "realtime", "backend"],
        "createdAt": "2025-01-11T13:00:00.000Z",
        "updatedAt": "2025-01-11T13:00:00.000Z",
        "dueDate": "2025-01-30T17:00:00.000Z"
      },
      {
        "id": 5,
        "title": "Add Task Comments Feature",
        "description": "Allow users to add comments to tasks with rich text formatting and file attachments.",
        "details": "Implement a rich text editor using Quill.js. Add file upload functionality with drag-and-drop support. Include comment threading and mentions.",
        "testStrategy": "Test comment creation, editing, deletion, and file attachments. Test rich text formatting and mentions.",
        "priority": "low",
        "dependencies": [1],
        "status": "deferred",
        "complexity": 5,
        "estimatedHours": 14,
        "assignedTo": "alex.brown@example.com",
        "tags": ["comments", "rich-text", "frontend"],
        "createdAt": "2025-01-12T15:00:00.000Z",
        "updatedAt": "2025-01-12T15:00:00.000Z",
        "dueDate": "2025-02-05T17:00:00.000Z"
      },
      {
        "id": 6,
        "title": "Setup CI/CD Pipeline",
        "description": "Create automated build and deployment pipeline using GitHub Actions.",
        "details": "Set up workflows for testing, building, and deploying to staging and production environments. Include code quality checks and security scanning.",
        "testStrategy": "Test pipeline with various scenarios including failed tests, build failures, and successful deployments.",
        "priority": "high",
        "dependencies": [],
        "status": "blocked",
        "complexity": 4,
        "estimatedHours": 10,
        "assignedTo": "david.lee@example.com",
        "tags": ["ci-cd", "devops", "automation"],
        "createdAt": "2025-01-13T09:00:00.000Z",
        "updatedAt": "2025-01-13T09:00:00.000Z",
        "dueDate": "2025-01-22T17:00:00.000Z"
      },
      {
        "id": 7,
        "title": "Create API Documentation",
        "description": "Generate comprehensive API documentation using OpenAPI/Swagger with interactive examples.",
        "details": "Document all API endpoints with request/response examples, authentication requirements, and error codes. Include interactive API explorer.",
        "testStrategy": "Review documentation accuracy, test all examples, and validate with stakeholders.",
        "priority": "medium",
        "dependencies": [1, 2],
        "status": "pending",
        "complexity": 3,
        "estimatedHours": 8,
        "assignedTo": "emma.davis@example.com",
        "tags": ["documentation", "api", "openapi"],
        "createdAt": "2025-01-14T10:00:00.000Z",
        "updatedAt": "2025-01-14T10:00:00.000Z",
        "dueDate": "2025-01-28T17:00:00.000Z"
      },
      {
        "id": 8,
        "title": "Implement Task Filtering",
        "description": "Add advanced filtering options for tasks including status, priority, assignee, and date ranges.",
        "details": "Create a filter sidebar with multiple filter options. Support saved filters and quick filter presets. Include search functionality.",
        "testStrategy": "Test all filter combinations, search functionality, and saved filters persistence.",
        "priority": "low",
        "dependencies": [3],
        "status": "pending",
        "complexity": 4,
        "estimatedHours": 12,
        "assignedTo": "chris.taylor@example.com",
        "tags": ["filtering", "search", "frontend"],
        "createdAt": "2025-01-15T11:00:00.000Z",
        "updatedAt": "2025-01-15T11:00:00.000Z",
        "dueDate": "2025-02-10T17:00:00.000Z"
      },
      {
        "id": 9,
        "title": "Add Email Notifications",
        "description": "Implement email notification system for task assignments, due dates, and status changes.",
        "details": "Set up email service with templates for different notification types. Include user preferences for notification settings.",
        "testStrategy": "Test email delivery, template rendering, and user preference handling.",
        "priority": "medium",
        "dependencies": [1],
        "status": "cancelled",
        "complexity": 6,
        "estimatedHours": 16,
        "assignedTo": "lisa.anderson@example.com",
        "tags": ["notifications", "email", "backend"],
        "createdAt": "2025-01-16T12:00:00.000Z",
        "updatedAt": "2025-01-16T12:00:00.000Z",
        "dueDate": "2025-02-01T17:00:00.000Z"
      },
      {
        "id": 10,
        "title": "Mobile App Development",
        "description": "Create a React Native mobile app for task management on iOS and Android.",
        "details": "Build cross-platform mobile app with core functionality including task viewing, creating, and updating. Include offline support.",
        "testStrategy": "Test on both iOS and Android devices, offline functionality, and synchronization when back online.",
        "priority": "low",
        "dependencies": [1, 2, 4],
        "status": "deferred",
        "complexity": 10,
        "estimatedHours": 40,
        "assignedTo": "kevin.martinez@example.com",
        "tags": ["mobile", "react-native", "ios", "android"],
        "createdAt": "2025-01-17T14:00:00.000Z",
        "updatedAt": "2025-01-17T14:00:00.000Z",
        "dueDate": "2025-03-15T17:00:00.000Z"
      }
    ],
    "metadata": {
      "created": "2025-01-08T09:00:00.000Z",
      "updated": "2025-01-17T14:00:00.000Z",
      "description": "Sample tasks for TaskMaster UI development and testing",
      "version": "1.0.0",
      "projectName": "TaskMaster UI Sample",
      "repositoryPath": "/Users/dev/projects/taskmaster-ui"
    }
  }
}